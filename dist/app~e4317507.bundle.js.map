{"version":3,"file":"app~e4317507.bundle.js","mappings":";2JAeA,QAPe,CACb,IAAKA,EAAAA,EACL,mBAAoBA,EAAAA,EACpB,YAAaC,EAAAA,EACb,cAAeC,EAAAA,mCCmBjB,QA5BkB,CAChBC,2BADgB,WAEd,IAAMC,EAAMC,OAAOC,SAASC,KAAKC,MAAM,GAAGC,cACpCC,EAAaC,KAAKC,aAAaR,GACrC,OAAOO,KAAKE,aAAaH,EAC1B,EAEDI,8BAPgB,WAQd,IAAMV,EAAMC,OAAOC,SAASC,KAAKC,MAAM,GAAGC,cAC1C,OAAOE,KAAKC,aAAaR,EAC1B,EAEDQ,aAZgB,SAYHR,GACX,IAAMW,EAAaX,EAAIY,MAAM,KAC7B,MAAO,CACLC,SAAUF,EAAW,IAAM,KAC3BG,GAAIH,EAAW,IAAM,KACrBI,KAAMJ,EAAW,IAAM,KAE1B,EAEDF,aArBgB,SAqBHH,GACX,OAAQA,EAAWO,SAAX,WAA0BP,EAAWO,UAAa,MACvDP,EAAWQ,GAAK,OAAS,KACzBR,EAAWS,KAAX,WAAsBT,EAAWS,MAAS,GAC9C,mSC3BH,smNA4CA,QAxC4B,CACpBC,KADoB,YAC2C,6HAAxDC,EAAwD,EAAxDA,oBAAqBC,EAAmC,EAAnCA,oBAAqBC,EAAc,EAAdA,WACrD,EAAKC,qBAAuBH,EAC5B,EAAKI,YAAcF,EACnB,EAAKG,qBAAuBJ,EAHuC,SAI7D,EAAKK,gBAJwD,4CAKpE,EAEKA,cARoB,WAQJ,yHACZT,EAAO,EAAKO,YAAZP,GADY,SAEV,EAAKU,mBAAmBV,GAFd,kCAGlB,EAAKW,eAHa,sBAKlB,EAAKC,cALa,4CAOrB,EAEKF,mBAjBoB,SAiBDV,GAAI,kIACF,EAAKQ,qBAAqBK,cAAcb,GADtC,cACrBK,EADqB,2BAElBA,GAFkB,4CAG5B,EACDO,YArB0B,WAqBZ,WACZnB,KAAKa,qBAAqBQ,WAAYC,EAAAA,EAAAA,KACnBC,SAASC,cAAc,eAC/BC,iBAAiB,QAA5B,YAAqC,8FAC7B,EAAKV,qBAAqBW,cAAc,EAAKZ,aADhB,OAEnC,EAAKE,gBAF8B,2CAItC,EAEDE,aA9B0B,WA8BX,WACblB,KAAKa,qBAAqBQ,WAAYM,EAAAA,EAAAA,KACnBJ,SAASC,cAAc,eAC/BC,iBAAiB,QAA5B,YAAqC,8FAC7B,EAAKV,qBAAqBa,iBAAiB,EAAKd,YAAYP,IAD/B,OAEnC,EAAKS,gBAF8B,2CAItC,+CCfH,QAtBmB,SAACT,EAAIsB,EAAMC,GAC5B,IAAMC,EAAgB,CACpBxB,GAAAA,EACAsB,KAAAA,EACAC,OAAAA,GAGFE,EAAAA,EAAAA,eAAqCD,GAErC,IAAME,EAAkBV,SAASC,cAAc,wBAEzCU,GAAO,IAAIC,MAAOC,mBAAmB,QAD3B,CAAEC,KAAM,UAAWC,MAAO,OAAQC,IAAK,YAEjDC,EAAY,yCAAH,OAELX,EAFK,gDAGeK,EAHf,kDAIkBJ,EAJlB,yBAOfG,EAAgBZ,WAAamB,CAC9B,oQCxBD,o7MAiBA,QAdgB,gCAAG,iFACX,kBAAmBC,UADR,uBAEfC,QAAQC,IAAI,+CAFG,mDAOTF,UAAUG,cAAcC,SAAS,kBAPxB,OAQfH,QAAQC,IAAI,6BARG,gDAUfD,QAAQC,IAAI,oCAAZ,MAVe,uOAAH","sources":["webpack://tuangeun-apps/./src/scripts/routes/routes.js","webpack://tuangeun-apps/./src/scripts/routes/url-parser.js","webpack://tuangeun-apps/./src/scripts/utils/like-button-initiator.js","webpack://tuangeun-apps/./src/scripts/utils/post-reviews.js","webpack://tuangeun-apps/./src/scripts/utils/sw-register.js"],"sourcesContent":["/* eslint-disable linebreak-style */\r\n/* eslint-disable no-underscore-dangle */\r\n/* eslint-disable import/no-duplicates */\r\n\r\nimport ListRestaurant from '../views/pages/listRestaurant';\r\nimport Favorite from '../views/pages/favorite';\r\nimport Detail from '../views/pages/detail';\r\n\r\nconst routes = {\r\n  '/': ListRestaurant, // default page\r\n  '/list-restaurant': ListRestaurant,\r\n  '/favorite': Favorite,\r\n  '/detail/:id': Detail,\r\n};\r\n\r\nexport default routes;\r\n","/* eslint-disable linebreak-style */\r\n/* eslint-disable no-underscore-dangle */\r\n\r\nconst UrlParser = {\r\n  parseActiveUrlWithCombiner() {\r\n    const url = window.location.hash.slice(1).toLowerCase();\r\n    const splitedUrl = this._urlSplitter(url);\r\n    return this._urlCombiner(splitedUrl);\r\n  },\r\n\r\n  parseActiveUrlWithoutCombiner() {\r\n    const url = window.location.hash.slice(1).toLowerCase();\r\n    return this._urlSplitter(url);\r\n  },\r\n\r\n  _urlSplitter(url) {\r\n    const urlsSplits = url.split('/');\r\n    return {\r\n      resource: urlsSplits[1] || null,\r\n      id: urlsSplits[2] || null,\r\n      verb: urlsSplits[3] || null,\r\n    };\r\n  },\r\n\r\n  _urlCombiner(splitedUrl) {\r\n    return (splitedUrl.resource ? `/${splitedUrl.resource}` : '/')\r\n    + (splitedUrl.id ? '/:id' : '')\r\n    + (splitedUrl.verb ? `/${splitedUrl.verb}` : '');\r\n  },\r\n};\r\n\r\nexport default UrlParser;\r\n","/* eslint-disable linebreak-style */\r\n/* eslint-disable no-underscore-dangle */\r\n\r\nimport { createLikeButtonTemplate, createLikedButtonTemplate } from '../views/templates/template-creator';\r\n\r\nconst LikeButtonInitiator = {\r\n  async init({ likeButtonContainer, favoriteRestaurants, restaurant }) {\r\n    this._likeButtonContainer = likeButtonContainer;\r\n    this._restaurant = restaurant;\r\n    this._favoriteRestaurants = favoriteRestaurants;\r\n    await this._renderButton();\r\n  },\r\n\r\n  async _renderButton() {\r\n    const { id } = this._restaurant;\r\n    if (await this._isRestaurantExist(id)) {\r\n      this._renderLiked();\r\n    } else {\r\n      this._renderLike();\r\n    }\r\n  },\r\n\r\n  async _isRestaurantExist(id) {\r\n    const restaurant = await this._favoriteRestaurants.getRestaurant(id);\r\n    return !!restaurant;\r\n  },\r\n  _renderLike() {\r\n    this._likeButtonContainer.innerHTML = createLikeButtonTemplate();\r\n    const likeButton = document.querySelector('#likeButton');\r\n    likeButton.addEventListener('click', async () => {\r\n      await this._favoriteRestaurants.putRestaurant(this._restaurant);\r\n      this._renderButton();\r\n    });\r\n  },\r\n\r\n  _renderLiked() {\r\n    this._likeButtonContainer.innerHTML = createLikedButtonTemplate();\r\n    const likeButton = document.querySelector('#likeButton');\r\n    likeButton.addEventListener('click', async () => {\r\n      await this._favoriteRestaurants.deleteRestaurant(this._restaurant.id);\r\n      this._renderButton();\r\n    });\r\n  },\r\n};\r\n\r\nexport default LikeButtonInitiator;\r\n","/* eslint-disable linebreak-style */\r\n/* eslint-disable no-underscore-dangle */\r\n\r\nimport TheRestaurantDbSource from '../data/therestaurantdb-source';\r\n\r\nconst PostReview = (id, name, review) => {\r\n  const dataFromInput = {\r\n    id,\r\n    name,\r\n    review,\r\n  };\r\n\r\n  TheRestaurantDbSource.postRestaurant(dataFromInput);\r\n\r\n  const reviewContainer = document.querySelector('.other_users_reviews');\r\n  const options = { year: 'numeric', month: 'long', day: 'numeric' };\r\n  const date = new Date().toLocaleDateString('id-ID', options);\r\n  const newReview = `\r\n    <div class=\"review\">\r\n      <h4>${name}</h4>\r\n      <p class=\"date__review\">${date}</p>\r\n      <p class=\"review__content\">${review}<p>\r\n    </div>\r\n    `;\r\n  reviewContainer.innerHTML += newReview;\r\n};\r\n\r\nexport default PostReview;\r\n","/* eslint-disable linebreak-style */\r\n/* eslint-disable no-underscore-dangle */\r\n/* eslint-disable no-console */\r\n\r\nconst swRegister = async () => {\r\n  if (!('serviceWorker' in navigator)) {\r\n    console.log('Service Worker not supported in the browser');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    await navigator.serviceWorker.register('./sw.bundle.js');\r\n    console.log('Service worker registered');\r\n  } catch (error) {\r\n    console.log('Failed to register service worker', error);\r\n  }\r\n};\r\n\r\nexport default swRegister;\r\n"],"names":["ListRestaurant","Favorite","Detail","parseActiveUrlWithCombiner","url","window","location","hash","slice","toLowerCase","splitedUrl","this","_urlSplitter","_urlCombiner","parseActiveUrlWithoutCombiner","urlsSplits","split","resource","id","verb","init","likeButtonContainer","favoriteRestaurants","restaurant","_likeButtonContainer","_restaurant","_favoriteRestaurants","_renderButton","_isRestaurantExist","_renderLiked","_renderLike","getRestaurant","innerHTML","createLikeButtonTemplate","document","querySelector","addEventListener","putRestaurant","createLikedButtonTemplate","deleteRestaurant","name","review","dataFromInput","TheRestaurantDbSource","reviewContainer","date","Date","toLocaleDateString","year","month","day","newReview","navigator","console","log","serviceWorker","register"],"sourceRoot":""}